name: Build Script
permissions:
  contents: write
  actions: write 

on:
  workflow_dispatch:
    inputs:
      kernelsu_variant:
        description: "Select KernelSU"
        required: true
        type: choice
        options:
          - 'KernelSU-Next'
          - 'SukiSU-Ultra'
        default: 'SukiSU-Ultra'
      hook:
        type: choice
        description: "Select Hook"
        required: true
        options:
          - 'Manual'
          - 'Tracepoint'
        default: 'Manual'
      android_version:
        description: "Select Android Version"
        required: true
        type: choice
        options:
          - 'android15'
        default: 'android15'
      kernel_version:
        description: "Select Kernel Version"
        required: true
        type: choice
        options:
          - '6.6.56'
          - '6.6.30'
        default: '6.6.56'
      use_bbr:
        description: 'Enables the BBR Algorithm'
        required: true
        type: boolean
        default: true
      use_net:
        description: 'Enable network optimization features (proxy, IPv6, etc.)'
        required: true
        type: boolean
        default: true
      # use_kpm:
      #   description: 'Enables the KPM Patch (may slightly increase power consumption)'
      #   required: true
      #   type: boolean
      #   default: false

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging

      - name: Set env from choices
        run: |
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            BRANCH_NAME="NEXT"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            BRANCH_NAME="SukiSU"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          fi
          
      - name: Install Dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            ccache python3 git curl build-essential libssl-dev bison flex libelf-dev

      - name: Set ccache
        run: |
          ccache --version
          ccache --max-size=3G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}" >> $GITHUB_ENV
          mkdir -p $HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}
          
      - name: Restore ccache from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}

      - name: Install Repo
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+rx ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      # - name: Clone AnyKernel3 and Other Dependencies
      #   run: |
      #     echo "Cloning AnyKernel3 and other dependencies..."
      #     ANYKERNEL_BRANCH="gki-2.0"
      #     SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
      #     echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
      #     echo "Using branch for SUSFS: $SUSFS_BRANCH"
      #     git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
      #     git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
      #     git clone https://github.com/WildPlusKernel/kernel_patches.git

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p kernel_workspace && cd kernel_workspace

          echo "Initializing and syncing kernel source..."
          repo init -u https://github.com/tukangbecak01/kernel_manifest.git -b "android15" -m "6.6.30.xml" --repo-rev=stable --depth=1 --no-clone-bundle --no-tags
          repo sync --optimized-fetch -c --no-tags --no-clone-bundle -j$(nproc --all)

          if [ -f "./common/Makefile" ]; then
            VERSION=$(grep '^VERSION' ./common/Makefile | cut -d '=' -f2 | xargs)
            PATCHLEVEL=$(grep '^PATCHLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
            SUBLEVEL=$(grep '^SUBLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
            echo "SERIES=${VERSION}.${PATCHLEVEL}" >> $GITHUB_ENV
            
            # Combined kernel version
            echo "KERNEL_VER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> $GITHUB_ENV
          fi
      - name: Fix Less Then 6.6.50 Builds
        run: |
          cd "kernel_workspace/common"
          if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
            else
                echo "Line already present. Skipping insert."
            fi
          fi

      - name: Add KernelSU & Apply SUSFS Patches
        run: |
          # Clone repositories
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.android_version }}-${{ env.SERIES }}
          git clone https://github.com/tukangbecak01/kernel_patches.git
          git clone https://github.com/tukangbecak01/AnyKernel3.git
          
          cd kernel_workspace
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Adding KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Adding KernelSU SukiSU..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          fi
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ env.SERIES }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ../kernel_patches/69_hide_stuff.patch ./common/
          
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Applying SUSFS patches for KernelSU Next..."
            cd ./KernelSU-Next
            
            # Copy KernelSU-Next patches
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            cp ../../kernel_patches/next/apk_sign.patch ./
            cp ../../kernel_patches/next/core_hook.patch ./
            cp ../../kernel_patches/next/selinux.patch ./
            cp ../../kernel_patches/next/ksud.patch ./
            cp ../../kernel_patches/next/rules.patch ./
            cp ../../kernel_patches/next/sucompat.patch ./
            cp ../../kernel_patches/next/kernel_compat.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
            patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
            patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
            patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
            patch -p1 --forward --fuzz=3 < fix_rules.c.patch
            patch -p1 --forward --fuzz=3 < fix_sucompat.c.patch
            patch -p1 --forward --fuzz=3 < fix_kernel_compat.c.patch
            
            KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Applying SUSFS patches for SukiSU..."
            cd ./KernelSU
            KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            cp "$GITHUB_WORKSPACE/.github/workflows/setup.sh" ./
            chmod +x setup.sh
            if [ ! -f "kernel/Makefile" ]; then
              echo "kernel/Makefile not found"
              ls -la
              exit 1
            fi
            ./setup.sh
          else
            echo "Invalid KernelSU variant selected!"
            exit 1
          fi

          cd ../common
          SUSFS_VERSION=$(grep '#define SUSFS_VERSION' ./include/linux/susfs.h | awk -F'"' '{print $2}')
          echo "SUSFS_VERSION=$SUSFS_VERSION" >> $GITHUB_ENV
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ env.SERIES }}.patch || true
          patch -p1 -F 3 < 69_hide_stuff.patch
          
      - name: Apply Hooks Patches
        run: |
          cd kernel_workspace/common

          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Applying hooks for SukiSU..."
            if [ "${{ inputs.hook }}" = "Manual" ]; then
              cp ../../kernel_patches/sukisu/syscall_hooks.patch ./
              patch -p1 -F 3 < syscall_hooks.patch
            elif [ "${{ inputs.hook }}" = "Tracepoint" ]; then
              cp ../../kernel_patches/sukisu/tracepoint_hooks.patch ./
              patch -p1 -F 3 < tracepoint_hooks.patch
            fi
          fi

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          echo "[+] Adding Samsung KDP exported symbols to abi_gki_aarch64_galaxy"
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          echo "[+] Adding Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            echo "[+] Successfully added Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          echo "[+] Adding Samsung minimal KDP driver"
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile


      - name: Add Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "kernel_workspace"
          echo "Adding configuration settings to gki_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
                    
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig 

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "kernel_workspace"

          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig

          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: Change Kernel Name
        run: |
          cd "kernel_workspace"
          if [ -f "build/build.sh" ]; then
              perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
              perl -0777 -pi -e 's/(.*)(echo "\$res")/$1echo "\$res-Next-v\$KSUVER-SUSFS-v1.5.9-Wild"/s' ./common/scripts/setlocalversion
              perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h
          else
              #Remove -maybe-dirty
              perl -pi -e 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl
              
              #Set Kernel Name
              echo "CONFIG_LOCALVERSION=\"-NEXT-v$KSUVER-SUSFS-v1.5.9-Wild\"" >> ./common/arch/arm64/configs/gki_defconfig

              #Set Kernel Timestamp
              perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Sun Apr 20 04:20:00 UTC 2025"/' ./common/init/Makefile

              #Remove Abi Exports and Error
              rm -rf ./common/android/abi_gki_protected_exports_*
              perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel
          fi

      - name: Build
        run : |
          set -e
          set -x
          cd "kernel_workspace/common"
          # echo "Building the kernel..."
          # if [ -f "build/build.sh" ]; then
          #   LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || exit 1
          # else
          #   tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
          # fi
          # ccache --show-stats
          export KBUILD_BUILD_TIMESTAMP="Tue Mar 11 12:18:17 UTC 2025"
          export PATH="$GITHUB_WORKSPACE/$CONFIG/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="$GITHUB_WORKSPACE/$CONFIG/prebuilts/kernel-build-tools/linux-x86/bin:$PATH"
          export PATH="$GITHUB_WORKSPACE/$CONFIG/prebuilts/rust/linux-x86/1.73.0b/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"

          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig || { echo "make defconfig failed"; exit 1; }
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 Image || { echo "make Image failed"; exit 1; }
              
      - name: 📦 Make AnyKernel3
        run: |
          cd ./AnyKernel3
          ZIP_NAME="AnyKernel3_${{ env.BRANCH_NAME }}_${{ env.MODEKPM }}_${{ env.KERNEL_VER }}.zip"
          cp ../kernel_workspace/common/out/arch/arm64/boot/Image ./Image
          zip -q -r "../$ZIP_NAME" ./*
            
      - name: 📤 Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_${{ env.BRANCH_NAME }}_${{ env.MODEKPM }}_${{ env.KERNEL_VER }}
          path: ./AnyKernel3/*
