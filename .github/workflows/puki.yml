name: GKI Kernel Build
permissions:
  contents: write
  actions: write 

on:
  workflow_dispatch:
    inputs:
      android_version:
        description: "Select Android Version"
        required: true
        type: choice
        options:
          - 'android15'
        default: 'android15'
      kernel_version:
        description: "Select Kernel Version"
        required: true
        type: choice
        options:
          - '6.6'
        default: '6.6'
      kernelsu_variant:
        description: "Selec"
        required: true
        type: choice
        options:
          - 'NEXT'
        default: 'NEXT'
      kernelsu_branch:
        description: "Selec"
        required: true
        type: choice
        options:
          - 'Dev'
        default: 'Dev'
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string
        default: ""

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Set env from choices
      #   run: |
      #     if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
      #       BRANCH_NAME="NEXT"
      #       echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      #     elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
      #       BRANCH_NAME="SukiSU"
      #       echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      #     fi
          
      - name: Maximize Build Space
        shell: bash
        run: |
          set -euo pipefail
          
          echo "Removing unused SDKs and tools..."

          # Remove dotnet (frees ~2 GB)
          sudo rm -rf /usr/share/dotnet || true
          
          # Remove haskell (frees ~5.2 GB)
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true
          
          # Remove Android SDK (frees ~9 GB)
          # sudo rm -rf /usr/local/lib/android || true
          
          # Remove CodeQL (frees ~5.4 GB)
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true

          # Removes cached Docker images (frees ~3.2 GB)
          sudo docker image prune --all --force || true

          # Additional optional cleanup (Chromium, Edge drivers, etc.)
          sudo rm -rf /usr/local/share/powershell || true
          sudo rm -rf /usr/local/share/chromium || true
          sudo rm -rf /usr/local/share/edge_driver || true
          sudo rm -rf /usr/local/share/chromedriver || true

          # Clear temp and apt cache
          sudo rm -rf /tmp/*
          sudo apt-get clean

          # Optional: clean user cache
          rm -rf ~/.cache

          echo "Creating 4GB swap file..."
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

          echo "Build space and swap maximized."
      
      - name: ðŸ“Š Check disk space
        run: |
          df -h

      - name: Install Dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            ccache python3 git curl build-essential libssl-dev bison flex libelf-dev

      - name: Set up ccache
        run: |
          # ccache --version
          # ccache --max-size=2G
          # ccache --set-config=compression=true
          # echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache --version
          ccache --max-size=3G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}" >> $GITHUB_ENV
          mkdir -p $HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}/bazel

      - name: Restore ccache from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}
          
      - name: Install Repo
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+rx ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/kernel_patches.git

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p kernel_workspace && cd kernel_workspace
          echo "Initializing and syncing kernel source..."
          repo init -u https://github.com/tukangbecak01/kernel_manifest.git -b "android15" -m "6.6.30.xml" --repo-rev=stable --depth=1 --no-clone-bundle --no-tags
          repo sync --optimized-fetch -c --no-tags --no-clone-bundle -j$(nproc --all)

      - name: Fix Less Then 6.6.50 Builds
        run: |
          cd kernel_workspace/common
          if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
            else
                echo "Line already present. Skipping insert."
            fi
          fi

      - name: Determine the branch for KernelSU
        run: |
          case "${{ inputs.kernelsu_branch }}" in
            "Stable")
              echo "BRANCH=-" >> $GITHUB_ENV
              ;;
            "Dev")
              if [[ "${{ inputs.kernelsu_variant }}" =~ ^(KSU|MKSU)$ ]]; then
                echo "BRANCH=-s main" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "NEXT" ]]; then
                echo "BRANCH=-s next" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "WILD" ]]; then
                echo "BRANCH=-s wild" >> $GITHUB_ENV
              fi
              ;;
            "Other")
              if [[ -n "${{ inputs.kernelsu_branch_other }}" ]]; then
                echo "BRANCH=-s ${{ inputs.kernelsu_branch_other }}" >> $GITHUB_ENV
              else
                echo "Error: Custom branch not provided for 'Other'" >&2
                exit 1
              fi
              ;;
          esac
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "kernel_workspace"
      
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Adding Wild KSU..."
              curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "KSU")
              echo "Adding KernelSU Official..."
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "NEXT")
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "MKSU")
              echo "Adding KernelSU MKSU..."
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
          esac
          
      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd kernel_workspace
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch
          cd ..
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./Wild_KSU
              ;;
            "KSU")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./KernelSU
              cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
              patch -p1 --forward < 10_enable_susfs_for_ksu.patch
              ;;
            "NEXT")
              echo "Applying SUSFS patches for KernelSU Next..."
              cd ./KernelSU-Next
              cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
              patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
              
              cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_apk_sign.c.patch ./
              patch -p1 --forward < fix_apk_sign.c.patch
              
              cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
              patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
              
              cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_selinux.c.patch ./
              patch -p1 --forward < fix_selinux.c.patch
              
              cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_ksud.c.patch ./
              patch -p1 --forward < fix_ksud.c.patch

              cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
              patch -p1 --forward < fix_rules.c.patch

              cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
              patch -p1 --forward < fix_sucompat.c.patch

              cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
              patch -p1 --forward < fix_kernel_compat.c.patch
              ;;
            "MKSU")
              echo "Applying SUSFS patches for MKSU..."
              cd ./KernelS
              ;;
          esac

      - name: Getting KernelSU Version
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd kernel_workspace
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./Wild_KSU
              BASE_VERSION=10200
              ;;
            "KSU")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./KernelSU
              BASE_VERSION=10200
              ;;
            "NEXT")
              cd ./KernelSU-Next
              BASE_VERSION=10200
              ;;
            "MKSU")
              ;;
          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          
      - name: Apply Hooks Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "kernel_workspace/common"
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "Applying hooks for Wild KSU..."
            cp ../../kernel_patches/wild/syscall_hooks.patch ./
            patch -p1 --forward -F 3 < syscall_hooks.patch
          fi

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "kernel_workspace/common"
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 --forward -F 3 < 69_hide_stuff.patch

      - name: Add Configuration Settings
        run: |
          cd kernel_workspace
          
          FILE="./common/arch/arm64/configs/gki_defconfig"
          set_config() {
            KEY="$1"
            VALUE="$2"

            if grep -q "^$KEY=" "$FILE"; then
              CURRENT_VALUE=$(grep "^$KEY=" "$FILE" | head -n1 | cut -d '=' -f2)
              if [ "$CURRENT_VALUE" != "$VALUE" ]; then
                echo "Updating $KEY from $CURRENT_VALUE to $VALUE"
                sed -i "s|^$KEY=.*|$KEY=$VALUE|" "$FILE"
              else
                echo "$KEY is already set to $VALUE â€” skipping"
              fi
            else
              echo "Adding $KEY=$VALUE"
              echo "$KEY=$VALUE" >> "$FILE"
            fi
          }
          
          # KSU Configuration
          set_config CONFIG_KSU y
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            set_config CONFIG_KSU_SUSFS_SUS_SU n
            set_config CONFIG_KSU_MANUAL_HOOK y
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            MODEKPM=$([ "${{ inputs.use_kpm }}" = "true" ] && echo "KPM" || echo "NoKPM")
            [ "$MODEKPM" = "KPM" ] && set_config CONFIG_KPM y
            echo "MODEKPM=$MODEKPM" >> $GITHUB_ENV
            
            if [ "${{ inputs.hook }}" = "Manual" ]; then
              set_config CONFIG_KSU_SUSFS_SUS_SU n
              set_config CONFIG_KSU_MANUAL_HOOK y
            elif [ "${{ inputs.hook }}" = "Tracepoint" ]; then
              set_config CONFIG_KSU_SUSFS_SUS_SU n
              set_config CONFIG_KSU_TRACEPOINT_HOOK y 
            fi
          fi

          # LZ4 1.10.0
          set_config CONFIG_LZ4V2_COMPRESS y
          set_config CONFIG_LZ4V2_HC y
          set_config CONFIG_LZ4V2_DEBUG n
          
          # Enable advanced compression support
          set_config CONFIG_CRYPTO_LZ4 y
          set_config CONFIG_CRYPTO_LZ4HC y
          
          # File system level compression support
          set_config CONFIG_F2FS_FS_COMPRESSION y
          set_config CONFIG_F2FS_FS_LZ4 y
          set_config CONFIG_F2FS_FS_LZ4HC y
          
          # TMPFS Configuration
          set_config CONFIG_RCU_TRACE n
          set_config CONFIG_TMPFS_XATTR y
          set_config CONFIG_TMPFS_POSIX_ACL y

          # NF Configuration
          set_config CONFIG_IP_NF_TARGET_TTL y
          set_config CONFIG_IP6_NF_TARGET_HL y
          set_config CONFIG_IP6_NF_MATCH_HL y
          set_config CONFIG_IP_NF_TARGET_ECN y
          
          # ECN Configuration
          set_config CONFIG_IP_ECN y
          set_config CONFIG_TCP_ECN y
          set_config CONFIG_IPV6_ECN y
          
          # SUSFS Configuration
          set_config CONFIG_KSU_SUSFS y
          set_config CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT y
          set_config CONFIG_KSU_SUSFS_SUS_PATH y
          set_config CONFIG_KSU_SUSFS_SUS_MOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT y
          set_config CONFIG_KSU_SUSFS_SUS_KSTAT y
          set_config CONFIG_KSU_SUSFS_SUS_OVERLAYFS n
          set_config CONFIG_KSU_SUSFS_TRY_UMOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT y
          set_config CONFIG_KSU_SUSFS_SPOOF_UNAME y
          set_config CONFIG_KSU_SUSFS_ENABLE_LOG y
          set_config CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS y
          set_config CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG y
          set_config CONFIG_KSU_SUSFS_OPEN_REDIRECT y

          # AutoFDO Configuration (Feedback-Directed Optimization)
          set_config CONFIG_AUTOFDO_CLANG y
          
          if [ "${{ inputs.use_bbr }}" = "true" ]; then
            # BBR Configuration
            set_config CONFIG_NET_SCH_FQ y
            set_config CONFIG_TCP_CONG_ADVANCED y
            set_config CONFIG_TCP_CONG_BBR y
            set_config CONFIG_TCP_CONG_BIC n
            set_config CONFIG_TCP_CONG_WESTWOOD n
            set_config CONFIG_TCP_CONG_HTCP n
            set_config CONFIG_DEFAULT_BBR y
          fi

          if [ "${{ inputs.use_net }}" = "true" ]; then
            # NET Configuration
            set_config CONFIG_NETFILTER_XT_MATCH_ADDRTYPE y
            set_config CONFIG_NETFILTER_XT_SET y
            set_config CONFIG_IP_SET y
            set_config CONFIG_IP_SET_MAX 65534
            set_config CONFIG_IP_SET_BITMAP_IP y
            set_config CONFIG_IP_SET_BITMAP_IPMAC y
            set_config CONFIG_IP_SET_BITMAP_PORT y
            set_config CONFIG_IP_SET_HASH_IP y
            set_config CONFIG_IP_SET_HASH_IPMARK y
            set_config CONFIG_IP_SET_HASH_IPPORT y
            set_config CONFIG_IP_SET_HASH_IPPORTIP y
            set_config CONFIG_IP_SET_HASH_IPPORTNET y
            set_config CONFIG_IP_SET_HASH_IPMAC y
            set_config CONFIG_IP_SET_HASH_MAC y
            set_config CONFIG_IP_SET_HASH_NETPORTNET y
            set_config CONFIG_IP_SET_HASH_NET y
            set_config CONFIG_IP_SET_HASH_NETNET y
            set_config CONFIG_IP_SET_HASH_NETPORT y
            set_config CONFIG_IP_SET_HASH_NETIFACE y
            set_config CONFIG_IP_SET_LIST_SET y
            set_config CONFIG_IP6_NF_NAT y
            set_config CONFIG_IP6_NF_IPTABLES y
            set_config CONFIG_IP6_NF_TARGET_MASQUERADE y
          fi
          
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd kernel_workspace
          if [ -f "build/build.sh" ]; then
              perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
              perl -0777 -pi -e 's/(.*)(echo "\$res")/$1echo "\$res-Next-v\$KSUVER-SUSFS-v1.5.9-Wild"/s' ./common/scripts/setlocalversion
              perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h
          else
              #Remove -maybe-dirty
              perl -pi -e 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl
              
              #Set Kernel Name
              echo "CONFIG_LOCALVERSION=\"-NEXT-v$KSUVER-SUSFS-v1.5.9-Wild\"" >> ./common/arch/arm64/configs/gki_defconfig

              #Set Kernel Timestamp
              perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Sun Apr 20 04:20:00 UTC 2025"/' ./common/init/Makefile

              #Remove Abi Exports and Error
              rm -rf ./common/android/abi_gki_protected_exports_*
              perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel
          fi

      - name: Build
        run : |
          set -e
          set -x
          cd kernel_workspace/common
          
          export KBUILD_BUILD_TIMESTAMP="Tue Mar 11 12:18:17 UTC 2025"
          export PATH="$GITHUB_WORKSPACE/$CONFIG/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="$GITHUB_WORKSPACE/$CONFIG/prebuilts/kernel-build-tools/linux-x86/bin:$PATH"
          export PATH="$GITHUB_WORKSPACE/$CONFIG/prebuilts/rust/linux-x86/1.73.0b/bin:$PATH"
          export PATH="/usr/lib/ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}:$PATH"

          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig || { echo "make defconfig failed"; exit 1; }
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 Image || { echo "make Image failed"; exit 1; }

      - name: ðŸ“¦ Make AnyKernel3
        run: |
          cd ./AnyKernel3
          ZIP_NAME="AnyKernel3_bawel.zip"
          cp ../$CONFIG/common/out/arch/arm64/boot/Image ./Image
          zip -q -r "../$ZIP_NAME" ./*
            
      - name: ðŸ“¤ Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_bawel
          path: ./AnyKernel3/*
