name: GKI Kernel Build
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      kernelsu_variant:
        description: "Select KernelSU"
        required: true
        type: choice
        options:
          - 'KernelSU-Next'
          - 'SukiSU-Ultra'
        default: 'SukiSU-Ultra'
      hook:
        type: choice
        description: "Select Hook"
        required: true
        options:
          - 'Manual'
          - 'Tracepoint'
        default: 'Manual'
      android_version:
        description: "Select Android Version"
        required: true
        type: choice
        options:
          - 'android15'
        default: 'android15'
      kernel_version:
        description: "Select Kernel Version"
        required: true
        type: choice
        options:
          - '6.6.56'
          - '6.6.30'
        default: '6.6.56'
      use_bbr:
        description: 'Enables the BBR Algorithm'
        required: true
        type: boolean
        default: true
      use_net:
        description: 'Enable network optimization features (proxy, IPv6, etc.)'
        required: true
        type: boolean
        default: true
      # use_kpm:
      #   description: 'Enables the KPM Patch (may slightly increase power consumption)'
      #   required: true
      #   type: boolean
      #   default: false
        
jobs:
  build-kernel-kernelsu-susfs:
    name: build-kernel-${{ inputs.android_version }}-${{ inputs.kernel_version }}-[${{ inputs.kernelsu_variant }}]
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set env from choices
        run: |
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            BRANCH_NAME="NEXT"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            BRANCH_NAME="SukiSU"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          fi
          
      - name: Maximize Build Space
        shell: bash
        run: |
          set -euo pipefail
          
          echo "Removing unused SDKs and tools..."

          # Remove dotnet (frees ~2 GB)
          sudo rm -rf /usr/share/dotnet || true
          
          # Remove haskell (frees ~5.2 GB)
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true
          
          # Remove Android SDK (frees ~9 GB)
          # sudo rm -rf /usr/local/lib/android || true
          
          # Remove CodeQL (frees ~5.4 GB)
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true

          # Removes cached Docker images (frees ~3.2 GB)
          sudo docker image prune --all --force || true

          # Additional optional cleanup (Chromium, Edge drivers, etc.)
          sudo rm -rf /usr/local/share/powershell || true
          sudo rm -rf /usr/local/share/chromium || true
          sudo rm -rf /usr/local/share/edge_driver || true
          sudo rm -rf /usr/local/share/chromedriver || true

          # Clear temp and apt cache
          sudo rm -rf /tmp/*
          sudo apt-get clean

          # Optional: clean user cache
          rm -rf ~/.cache

          echo "Creating 4GB swap file..."
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

          echo "Build space and swap maximized."
      
      - name: 📊 Check disk space
        run: |
          df -h
          
      - name: Install Dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            ccache python3 git curl build-essential libssl-dev bison flex libelf-dev
          
      - name: Set ccache
        run: |
          ccache --version
          ccache --max-size=3G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}" >> $GITHUB_ENV
          mkdir -p $HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}
          
      - name: Restore ccache from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}
          
      - name: Install Repo
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+rx ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          # echo "REPO_CACHE_DIR=$HOME/.repo_${{ inputs.android_version }}-${{ inputs.kernel_version }}" >> $GITHUB_ENV
          # mkdir -p $HOME/.repo_${{ inputs.android_version }}-${{ inputs.kernel_version }}

      # - name: Restore repo cache
      #   uses: actions/cache@v4
      #   with:
      #     path: kernel_workspace/.repo
      #     key: repo-${{ inputs.android_version }}-${{ inputs.kernel_version }}
      #     restore-keys: |
      #       repo-
            
      - name: Initialize repo and sync
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p kernel_workspace && cd kernel_workspace

          repo init -u https://github.com/tukangbecak01/kernel_manifest.git -b "${{ inputs.android_version }}" -m "${{ inputs.kernel_version }}.xml" --repo-rev=stable --depth=1 --no-clone-bundle --no-tags
          repo sync --optimized-fetch -c --no-tags --no-clone-bundle -j$(nproc --all) --fail-fast
          
          rm -rf prebuilts/gcc
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-gnu-9.3.git prebuilts/gcc
          
          echo "Cleaning old ABI exports..."
          rm -rf ./common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm -rf ./msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
      
          if [ -f "./common/Makefile" ]; then
            VERSION=$(grep '^VERSION' ./common/Makefile | cut -d '=' -f2 | xargs)
            PATCHLEVEL=$(grep '^PATCHLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
            SUBLEVEL=$(grep '^SUBLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
            echo "SERIES=${VERSION}.${PATCHLEVEL}" >> $GITHUB_ENV
            
            # Combined kernel version
            echo "KERNEL_VER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> $GITHUB_ENV
          fi

      - name: Fix Less Then 6.6.50 Builds
        run: |
          cd "kernel_workspace/common"
          if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
              sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
            else
              echo "Line already present. Skipping insert."
            fi
          fi
          
      - name: Add KernelSU & Apply SUSFS Patches
        run: |
          # Clone repositories
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.android_version }}-${{ env.SERIES }}
          git clone https://github.com/tukangbecak01/kernel_patches.git
          git clone https://github.com/tukangbecak01/AnyKernel3.git
          
          cd kernel_workspace
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Adding KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Adding KernelSU SukiSU..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          fi
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ env.SERIES }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ../kernel_patches/69_hide_stuff.patch ./common/
          
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Applying SUSFS patches for KernelSU Next..."
            cd ./KernelSU-Next
            
            # Copy KernelSU-Next patches
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            cp ../../kernel_patches/next/apk_sign.patch ./
            cp ../../kernel_patches/next/core_hook.patch ./
            cp ../../kernel_patches/next/selinux.patch ./
            cp ../../kernel_patches/next/ksud.patch ./
            cp ../../kernel_patches/next/rules.patch ./
            cp ../../kernel_patches/next/sucompat.patch ./
            cp ../../kernel_patches/next/kernel_compat.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
            patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
            patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
            patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
            patch -p1 --forward --fuzz=3 < fix_rules.c.patch
            patch -p1 --forward --fuzz=3 < fix_sucompat.c.patch
            patch -p1 --forward --fuzz=3 < fix_kernel_compat.c.patch
            
            KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Applying SUSFS patches for SukiSU..."
            cd ./KernelSU
            KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            cp "$GITHUB_WORKSPACE/.github/workflows/setup.sh" ./
            chmod +x setup.sh
            if [ ! -f "kernel/Makefile" ]; then
              echo "kernel/Makefile not found"
              ls -la
              exit 1
            fi
            ./setup.sh
          else
            echo "Invalid KernelSU variant selected!"
            exit 1
          fi

          cd ../common
          SUSFS_VERSION=$(grep '#define SUSFS_VERSION' ./include/linux/susfs.h | awk -F'"' '{print $2}')
          echo "SUSFS_VERSION=$SUSFS_VERSION" >> $GITHUB_ENV
          
          # if [ "{{ inputs.kernel_version }}" = "6.6.30" ]; then
          #   sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ env.SERIES }}.patch
          #   sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ env.SERIES }}.patch
          # fi
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ env.SERIES }}.patch || true
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply Hooks Patches
        run: |
          cd kernel_workspace/common

          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Applying hooks for SukiSU..."
            if [ "${{ inputs.hook }}" = "Manual" ]; then
              cp ../../kernel_patches/sukisu/syscall_hooks.patch ./
              patch -p1 -F 3 < syscall_hooks.patch
            elif [ "${{ inputs.hook }}" = "Tracepoint" ]; then
              cp ../../kernel_patches/sukisu/tracepoint_hooks.patch ./
              patch -p1 -F 3 < tracepoint_hooks.patch
            fi
          fi
          
      - name: Updated LZ4 to v1.10.0
        run: |
          LZ4_VERSION="1.10.0"
          LZ4_DOWNLOAD_URL="https://github.com/lz4/lz4/archive/refs/tags/v${LZ4_VERSION}.tar.gz"
          cd kernel_workspace/common
          mkdir -p lz4_temp && cd lz4_temp
          echo "Download LZ4 ${LZ4_VERSION} source code..."
          curl -Ls "${LZ4_DOWNLOAD_URL}" -o lz4.tar.gz
          tar -zxf lz4.tar.gz --strip-components=1

          # Copy the files and use independent names to avoid conflicts with LZ4K
          echo "Copy the LZ4 file to the kernel directory..."
          # Source code file (add "lz4v2_" prefix)
          cp lib/lz4.c ../lib/lz4v2_core.c
          cp lib/lz4.h ../lib/lz4v2_core.h
          cp lib/lz4hc.c ../lib/lz4v2_hc.c
          cp lib/lz4hc.h ../lib/lz4v2_hc.h
          # Header file (put in a separate path）
          mkdir -p ../include/linux/lz4v2
          cp lib/lz4.h ../include/linux/lz4v2/lz4.h
          cp lib/lz4hc.h ../include/linux/lz4v2/lz4hc.h

          # Globally rename functions and macros (complete namespace isolation)
          echo "Rename symbols to avoid conflicts..."
          # Core compression functions renamed
          sed -i 's/LZ4_compress_default/lz4v2_compress_default/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          sed -i 's/LZ4_decompress_safe/lz4v2_decompress_safe/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          # HC high compression function rename
          sed -i 's/LZ4_compress_HC/lz4v2_compress_HC/g' ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          # Internal macros and helper functions renamed
          sed -i 's/LZ4_/LZ4V2_/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          
          # Add kernel compatibility adaptation
          echo "Add kernel adaptation code..."
          # Introduce necessary kernel header files
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_core.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_core.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_core.c
          # HC files are processed similarly
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_hc.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_hc.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_hc.c

          # Add module declaration (conforming to kernel spec)
          echo "Add module metadata..."
          cat >> ../lib/lz4v2_core.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_default);
          EXPORT_SYMBOL(lz4v2_decompress_safe);
          EOF

          cat >> ../lib/lz4v2_hc.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4HC 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_HC);
          EOF

          # Update Makefile to ensure compilation
          echo "Update Makefile configuration..."
          if ! grep -q "lz4v2_core.o" ../lib/Makefile; then
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_core.o" >> ../lib/Makefile
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_hc.o" >> ../lib/Makefile
          fi

          # Clean temporary files
          cd .. && rm -rf lz4_temp
          echo "LZ4 ${LZ4_VERSION} integration completed"
          
      - name: Apply ECN and TCP Pacing Tweaks
        run: |
          set -e
          TCP_IPV4_PATH="$GITHUB_WORKSPACE/kernel_workspace/common/net/ipv4/tcp_ipv4.c"
          if [ ! -f "$TCP_IPV4_PATH" ]; then echo "ERROR: $TCP_IPV4_PATH not found!"; exit 1; fi
          sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 1;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' "$TCP_IPV4_PATH"
          echo "ECN and TCP Pacing tweaks successfully applied."
          
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace
          
          FILE="./common/arch/arm64/configs/gki_defconfig"

          set_config() {
            KEY="$1"
            VALUE="$2"

            if grep -q "^$KEY=" "$FILE"; then
              CURRENT_VALUE=$(grep "^$KEY=" "$FILE" | head -n1 | cut -d '=' -f2)
              if [ "$CURRENT_VALUE" != "$VALUE" ]; then
                echo "Updating $KEY from $CURRENT_VALUE to $VALUE"
                sed -i "s|^$KEY=.*|$KEY=$VALUE|" "$FILE"
              else
                echo "$KEY is already set to $VALUE — skipping"
              fi
            else
              echo "Adding $KEY=$VALUE"
              echo "$KEY=$VALUE" >> "$FILE"
            fi
          }
          
          # KSU Configuration
          set_config CONFIG_KSU y
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            set_config CONFIG_KSU_SUSFS_SUS_SU n
            set_config CONFIG_KSU_MANUAL_HOOK y
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            MODEKPM=$([ "${{ inputs.use_kpm }}" = "true" ] && echo "KPM" || echo "NoKPM")
            [ "$MODEKPM" = "KPM" ] && set_config CONFIG_KPM y
            echo "MODEKPM=$MODEKPM" >> $GITHUB_ENV
            
            if [ "${{ inputs.hook }}" = "Manual" ]; then
              set_config CONFIG_KSU_SUSFS_SUS_SU n
              set_config CONFIG_KSU_MANUAL_HOOK y
            elif [ "${{ inputs.hook }}" = "Tracepoint" ]; then
              set_config CONFIG_KSU_SUSFS_SUS_SU n
              set_config CONFIG_KSU_TRACEPOINT_HOOK y 
            fi
          fi

          # LZ4 1.10.0
          set_config CONFIG_LZ4V2_COMPRESS y
          set_config CONFIG_LZ4V2_HC y
          set_config CONFIG_LZ4V2_DEBUG n
          
          # Enable advanced compression support
          set_config CONFIG_CRYPTO_LZ4 y
          set_config CONFIG_CRYPTO_LZ4HC y
          
          # File system level compression support
          set_config CONFIG_F2FS_FS_COMPRESSION y
          set_config CONFIG_F2FS_FS_LZ4 y
          set_config CONFIG_F2FS_FS_LZ4HC y
          
          # TMPFS Configuration
          set_config CONFIG_RCU_TRACE n
          set_config CONFIG_TMPFS_XATTR y
          set_config CONFIG_TMPFS_POSIX_ACL y

          # NF Configuration
          set_config CONFIG_IP_NF_TARGET_TTL y
          set_config CONFIG_IP6_NF_TARGET_HL y
          set_config CONFIG_IP6_NF_MATCH_HL y
          set_config CONFIG_IP_NF_TARGET_ECN y
          
          # ECN Configuration
          set_config CONFIG_IP_ECN y
          set_config CONFIG_TCP_ECN y
          set_config CONFIG_IPV6_ECN y
          
          # SUSFS Configuration
          set_config CONFIG_KSU_SUSFS y
          set_config CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT y
          set_config CONFIG_KSU_SUSFS_SUS_PATH y
          set_config CONFIG_KSU_SUSFS_SUS_MOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT y
          set_config CONFIG_KSU_SUSFS_SUS_KSTAT y
          set_config CONFIG_KSU_SUSFS_SUS_OVERLAYFS n
          set_config CONFIG_KSU_SUSFS_TRY_UMOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT y
          set_config CONFIG_KSU_SUSFS_SPOOF_UNAME y
          set_config CONFIG_KSU_SUSFS_ENABLE_LOG y
          set_config CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS y
          set_config CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG y
          set_config CONFIG_KSU_SUSFS_OPEN_REDIRECT y

          # AutoFDO Configuration (Feedback-Directed Optimization)
          set_config CONFIG_AUTOFDO_CLANG y
          
          if [ "${{ inputs.use_bbr }}" = "true" ]; then
            # BBR Configuration
            set_config CONFIG_NET_SCH_FQ y
            set_config CONFIG_TCP_CONG_ADVANCED y
            set_config CONFIG_TCP_CONG_BBR y
            set_config CONFIG_TCP_CONG_BIC n
            set_config CONFIG_TCP_CONG_WESTWOOD n
            set_config CONFIG_TCP_CONG_HTCP n
            set_config CONFIG_DEFAULT_BBR y
          fi

          if [ "${{ inputs.use_net }}" = "true" ]; then
            # NET Configuration
            set_config CONFIG_NETFILTER_XT_MATCH_ADDRTYPE y
            set_config CONFIG_NETFILTER_XT_SET y
            set_config CONFIG_IP_SET y
            set_config CONFIG_IP_SET_MAX 65534
            set_config CONFIG_IP_SET_BITMAP_IP y
            set_config CONFIG_IP_SET_BITMAP_IPMAC y
            set_config CONFIG_IP_SET_BITMAP_PORT y
            set_config CONFIG_IP_SET_HASH_IP y
            set_config CONFIG_IP_SET_HASH_IPMARK y
            set_config CONFIG_IP_SET_HASH_IPPORT y
            set_config CONFIG_IP_SET_HASH_IPPORTIP y
            set_config CONFIG_IP_SET_HASH_IPPORTNET y
            set_config CONFIG_IP_SET_HASH_IPMAC y
            set_config CONFIG_IP_SET_HASH_MAC y
            set_config CONFIG_IP_SET_HASH_NETPORTNET y
            set_config CONFIG_IP_SET_HASH_NET y
            set_config CONFIG_IP_SET_HASH_NETNET y
            set_config CONFIG_IP_SET_HASH_NETPORT y
            set_config CONFIG_IP_SET_HASH_NETIFACE y
            set_config CONFIG_IP_SET_LIST_SET y
            set_config CONFIG_IP6_NF_NAT y
            set_config CONFIG_IP6_NF_IPTABLES y
            set_config CONFIG_IP6_NF_TARGET_MASQUERADE y
          fi
          
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd kernel_workspace
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          sudo sed -i 's/-4k/-android15-8-g7f19c751e334-ab13222567-4k/g' ./common/arch/arm64/configs/gki_defconfig
      
      - name: 🔨 Build with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: timeout
          command: |
            set -e
            set -x
            cd kernel_workspace/common
            # sed -i 's/BUILD_SYSTEM_DLKM=1/BUILD_SYSTEM_DLKM=0/' ./build.config.gki.aarch64
            # sed -i '/MODULES_ORDER=android\/gki_aarch64_modules/d' ./build.config.gki.aarch64
            # sed -i '/KMI_SYMBOL_LIST_STRICT_MODE/d' ./build.config.gki.aarch64

            export KBUILD_BUILD_TIMESTAMP="Tue Mar 11 12:18:17 UTC 2025"
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
            #export PATH="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/gcc/bin:$PATH"
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/kernel-build-tools/linux-x86/bin:$PATH"
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/rust/linux-x86/1.73.0b/bin:$PATH"
            export PATH="/usr/lib/ccache:$PATH"

            # echo "--- Clang Version ---"
            # clang --version
            # echo "--- GCC Version ---"
            # aarch64-buildroot-linux-gnu-gcc -v
            
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig || { echo "make defconfig failed"; exit 1; }
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 Image || { echo "make failed"; exit 1; }
          
      # - name: 📦 Apply KPM Patch (SukiSU only)
      #   if: ${{ inputs.use_kpm }}
      #   run: |
      #     cd kernel_workspace/common/out/arch/arm64/boot
      #     TAG=$(curl -s https://api.github.com/repos/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases | jq -r 'map(select(.prerelease == false and .draft == false)) | first | .tag_name')
      #     echo "Latest tag is: $TAG"
      #     curl -LSs -o patch_linux "https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/$TAG/patch_linux"
      #     chmod +x patch_linux
      #     ./patch_linux
      #     rm -f Image
      #     mv oImage Image
          
      - name: 📦 Make AnyKernel3
        run: |
          cd ./AnyKernel3
          ZIP_NAME="AnyKernel3_${{ env.BRANCH_NAME }}_${{ env.MODEKPM }}_${{ env.KERNEL_VER }}.zip"
          cp ../kernel_workspace/common/out/arch/arm64/boot/Image ./Image
          zip -q -r "../$ZIP_NAME" ./*
            
      - name: 📤 Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_${{ env.BRANCH_NAME }}_${{ env.MODEKPM }}_${{ env.KERNEL_VER }}
          path: ./AnyKernel3/*
          
      - name: Package files
        run: |
          TAG=$(curl -s https://api.github.com/repos/libxzr/HorizonKernelFlasher/releases | jq -r 'map(select(.prerelease == false and .draft == false)) | first | .tag_name')
          echo "Latest tag is: $TAG"
          echo "Packing files..."
          ESCAPED_KERNEL_VER=$(echo "${{ env.KERNEL_VER }}" | sed -e 's/\./\\./g' -e 's/-/\\-/g')
          ESCAPED_KSU_VARIANT=$(echo "${{ inputs.kernelsu_variant }} (${{ env.KSUVER }})" | sed -e 's/\./\\./g' -e 's/-/\\-/g' -e 's/(/\\(/g' -e 's/)/\\)/g')
          ESCAPED_SUSFS_VER=$(echo "${{ env.SUSFS_VERSION }}" | sed -e 's/\./\\./g')
          cat > release.txt << EOF
          >KernelVer: $ESCAPED_KERNEL_VER
          >DriverKSU: $ESCAPED_KSU_VARIANT
          >SUSFS ඞ: $ESCAPED_SUSFS_VER (${{ inputs.hook }} Hook)
          EOF
          
          cat >> release.txt << 'EOF'
          📝 Features:
          ```
          [+] LZ4 v1.10.0 (ZRAM)
          [+] TCP Pacing Tweaks
          [+] BBR Algorithm + ECN Support
          [+] TMPFS XATTR + POSIX ACL Support```
          ⬇ How To Flash:
          >Use flashing software, such as [Horizon Kernel Flasher](https://github.com/libxzr/HorizonKernelFlasher/releases/download/v1.3/app-release.apk) for flashing the kernel \(Give root access to the Application\)
          EOF
          
      - name: Upload to telegram
        uses: puernya/tg-bot-upload@v1
        with:
          bot-id: ${{ secrets.BOT_ID }}
          chat-id: ${{ secrets.CHAT_ID }}
          topic-id: ${{ secrets.TOPIC_ID }} 
          file-path: |
                  *.zip
          caption-path: release.txt

      - name: 📊 Post-build disk check
        run: df -h
